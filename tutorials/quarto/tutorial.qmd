---
title: evoke Tutorial
toc: true
number-sections: true
format:
  html:
    code-fold: false
jupyter: python3
bibliography: evoke_bibliography.bib
csl: apa.csl
---

## Basics

### Creating figures; tweaking cosmetic features

Suppose you want to recreate Figure 1.1 from [@skyrms2010signals, p. 11].
It's as easy as importing the relevant class and creating an instance of it.

```{python}
#| label: fig-skyrms2010-1-1
#| fig-cap: "A recreation of figure 1.1 from [@skyrms2010signals, p. 11]."
from evoke.examples.skyrms2010signals import *

fig1_1 = Skyrms2010_1_1()
```
Let's say you don't like the boring black arrows and want them to be blue instead.
The figure you just created has various customisable options.
Change the `color` attribute, and evoke will automatically rebuild the plot:

```{python}
#| label: fig-skyrms2010-1-1-blue
#| fig-cap: "Blue arrows look more vivid."
fig1_1.color = "blue"
```

Suppose you're appalled at the lack of axis labels.
You can add them like standard class attributes.
The figure will again be instantly recreated.

```{python}
#| fig-cap: "That's better!"
#| label: fig-skyrms2010-1-1-labels
fig1_1.show_immediately = False # Let's not create two new plots...
fig1_1.xlabel = "Proportion of receivers playing R2"
fig1_1.ylabel = "Proportion of senders playing R2"
fig1_1.show() #... let's just create one manually.
```

Here we suppressed the immediate output upon changing an attribute by first setting `fig1_1.show_immediately = False`.
Without this, the code would have created two new figures, one after the setting of `fig1_1.xlabel` and one after `fig1_1.ylabel`.

Some figures look better without axes at all.
Skyrms' second figure is an example:

```{python}
#| label: fig-skyrms2010-1-2
#| fig-cap: "A recreation of figure 1.2 from [@skyrms2010signals, p. 12]."

fig1_2 = Skyrms2010_1_2()
```

If you want to see the axes, just switch `noaxis` to `False`:

```{python}
#| label: fig-skyrms2010-1-2-axis
#| fig-cap: "The axes really give shape to the tetrahedron."

fig1_2.noaxis = False
```

I know what you're thinking, and the answer is yes, you can make the arrows blue.

```{python}
#| label: fig-skyrms2010-1-2-color
#| fig-cap: "Lovely blue arrows."

fig1_2.color = "blue"
```

### Changing data in figures

One of the useful features of evoke is that it allows you to re-run existing figures with different data.
In this way you can see how the results of a simulation would change if the parameters were tweaked.

Let's take figure 3.3 of [@skyrms2010signals, p. 40] as an example.
Once again we can create the basic figure just by creating an instance of the object.

```{python}
#| label: fig-skyrms2010-3-3
#| fig-cap: "[@skyrms2010signals, p. 40] figure 3.3."

fig3_3 = Skyrms2010_3_3()
```

(Figures like this rely on some randomisation, so the figure above might look a little different from how it does in the book.)

The basic figure shows what happens after 100 iterations.
Let's say we want to see what happens after 1000:

```{python}
#| label: fig-skyrms2010-3-3-iterations
#| fig-cap: "Crank up the iterations!"

fig3_3 = Skyrms2010_3_3(iterations=1000)
```
Even if 100 iterations was not enough to generate appreciable information transmission between agents, 1000 iterations very likely will be.


## References
